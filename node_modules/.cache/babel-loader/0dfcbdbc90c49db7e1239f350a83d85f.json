{"ast":null,"code":"var _jsxFileName = \"F:\\\\music_webapp\\\\src\\\\components\\\\playbar\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState, useRef, useCallback } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addToPlaylistAsync, changeCurrentSong } from './redux/action';\nimport { NavLink } from 'react-router-dom';\nimport { getAudioSrc } from '@/utils/format-data';\nimport { PlayerbarWrapper } from './style';\nimport LeftControl from './child-components/leftControl';\nimport MidContent from './child-components/middleContent';\nimport RightControl from './child-components/rightControl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(function PlayerBar() {\n  _s();\n\n  // 组件自身state\n  // 是否正在播放\n  const [isPlaying, setIsPlaying] = useState(false); // 歌曲播放时间\n\n  const [playTime, setPlayTime] = useState(0); // Slider进度条的值\n\n  const [sliderValue, setSliderValue] = useState(0); // 拖动进度条时，若audio中的onTimeUpdate事件也在更改进度会有bug，应该让拖动进度条的优先级更高\n  // flag为true表示正在拖动滑块改变进度，此时audio中的onTimeUpdate事件不应该再更改进度条(播放时间与进度值)\n\n  const [flag, setFlag] = useState(false); // 是否展示音量条\n\n  const [showVolume, setShowVolume] = useState(false); // 获取redux数据\n\n  const {\n    playlist,\n    songIndex,\n    firstLoad,\n    playSequence,\n    forcePlay\n  } = useSelector(state => ({\n    playlist: state.getIn(['player', 'playlist']),\n    songIndex: state.getIn(['player', 'songIndex']),\n    firstLoad: state.getIn(['player', 'firstLoad']),\n    playSequence: state.getIn(['player', 'playSequence']),\n    forcePlay: state.getIn(['player', 'forcePlay'])\n  }), shallowEqual); // 当前播放歌曲\n\n  const currentSong = playlist && playlist[songIndex];\n  const dispatch = useDispatch(); // isPlaying 控制歌曲是否播放(true播放，false暂停)\n  // 将isPlaying状态分离出来监听，方便控制 切换歌曲 或 点击播放时 是否直接播放\n  // 因为切换歌曲不一定直接播放（如果当前播放歌曲是暂时状态的，切到上一首或下一首应该也要暂停）\n  // 而点击播放按钮，就直接播放（不管当前歌曲是否暂停，都直接播放点击的那首歌曲）\n\n  useEffect(() => {\n    isPlaying && audioRef.current.play();\n  }, [isPlaying]); // 当前歌曲索引改变后，重新设置音频src\n\n  useEffect(() => {\n    audioRef.current.src = currentSong && getAudioSrc(currentSong.id); // 通过isPlaying状态来控制播放，如果是暂停状态，那么切换歌曲也不要播放\n\n    if (isPlaying) {\n      setIsPlaying(true + Math.random());\n    }\n  }, [songIndex]); // 点击播放按钮直接播放，不管当前歌曲是否暂停\n\n  useEffect(() => {\n    // 第一次加载时不要自动播放(点击播放按钮后更改firstLoad为false => 点击就直接播放)\n    if (!firstLoad) {\n      setIsPlaying(true + Math.random());\n    }\n  }, [forcePlay]); // 保存audio节点\n\n  const audioRef = useRef();\n  console.log('playlist', playlist);\n  console.log('songIndex', songIndex);\n  console.log('firstLoad: ', firstLoad); // console.log('currentSong', currentSong)\n  // 利用audio中的onTimeUpdate更新歌曲的播放时间\n\n  const updatePlayTime = e => {\n    const currentTime = e.target.currentTime;\n\n    if (!flag) {\n      setPlayTime(currentTime * 1000);\n      setSliderValue(currentTime * 1000 / currentSong.dt * 100);\n    }\n  }; // 处理歌曲播放结束，选择下一首歌曲\n\n\n  const handleEnding = () => {\n    let randomNum = Math.floor(Math.random() * playlist.length);\n\n    while (randomNum === songIndex) {\n      randomNum = Math.floor(Math.random() * playlist.length);\n    }\n\n    switch (playSequence) {\n      // 随机播放\n      case 1:\n        dispatch(changeCurrentSong(randomNum));\n        break;\n      // 单曲循环\n\n      case 2:\n        audioRef.current.currentTime = 0;\n        audioRef.current.play();\n        break;\n      // 顺序播放      \n\n      default:\n        dispatch(changeCurrentSong((songIndex + 1) % playlist.length));\n    }\n  }; // 重新播放，传给RightControl组件\n\n\n  const replay = () => {\n    audioRef.current.currentTime = 0;\n    audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(PlayerbarWrapper, {\n    className: \"sprite_player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w980 content\",\n      children: [/*#__PURE__*/_jsxDEV(LeftControl, {\n        musicdom: audioRef,\n        isPlaying: isPlaying,\n        setIsPlaying: setIsPlaying,\n        playSequence: playSequence,\n        songIndex: songIndex,\n        playlistLength: playlist.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MidContent, {\n        musicdom: audioRef,\n        playTime: playTime,\n        setPlayTime: setPlayTime,\n        sliderValue: sliderValue,\n        setSliderValue: setSliderValue,\n        setFlag: setFlag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RightControl, {\n        musicdom: audioRef,\n        showVolume: showVolume,\n        setShowVolume: setShowVolume,\n        playSequence: playSequence,\n        playlist: playlist,\n        replay: replay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      id: \"audio\",\n      onTimeUpdate: updatePlayTime,\n      preload: \"auto\",\n      onEnded: handleEnding\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}, \"oENvwsfpp2gjP1zkvvAD3XkE0ks=\", false, function () {\n  return [useSelector, useDispatch];\n})), \"oENvwsfpp2gjP1zkvvAD3XkE0ks=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","memo","useEffect","useState","useRef","useCallback","shallowEqual","useDispatch","useSelector","addToPlaylistAsync","changeCurrentSong","NavLink","getAudioSrc","PlayerbarWrapper","LeftControl","MidContent","RightControl","PlayerBar","isPlaying","setIsPlaying","playTime","setPlayTime","sliderValue","setSliderValue","flag","setFlag","showVolume","setShowVolume","playlist","songIndex","firstLoad","playSequence","forcePlay","state","getIn","currentSong","dispatch","audioRef","current","play","src","id","Math","random","console","log","updatePlayTime","e","currentTime","target","dt","handleEnding","randomNum","floor","length","replay"],"sources":["F:/music_webapp/src/components/playbar/index.js"],"sourcesContent":["import React, { memo, useEffect, useState, useRef, useCallback } from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport {addToPlaylistAsync, changeCurrentSong} from './redux/action'\r\n\r\nimport { NavLink } from 'react-router-dom';\r\nimport {getAudioSrc} from '@/utils/format-data'\r\n\r\nimport {PlayerbarWrapper} from './style'\r\nimport LeftControl from './child-components/leftControl';\r\nimport MidContent from './child-components/middleContent';\r\nimport RightControl from './child-components/rightControl';\r\n\r\n\r\nexport default memo(function PlayerBar() {\r\n\r\n  // 组件自身state\r\n\r\n  // 是否正在播放\r\n  const [isPlaying, setIsPlaying] = useState(false)\r\n  // 歌曲播放时间\r\n  const [playTime, setPlayTime] = useState(0)\r\n  // Slider进度条的值\r\n  const [sliderValue, setSliderValue] = useState(0)\r\n  // 拖动进度条时，若audio中的onTimeUpdate事件也在更改进度会有bug，应该让拖动进度条的优先级更高\r\n  // flag为true表示正在拖动滑块改变进度，此时audio中的onTimeUpdate事件不应该再更改进度条(播放时间与进度值)\r\n  const [flag, setFlag] = useState(false)\r\n  // 是否展示音量条\r\n  const [showVolume, setShowVolume] = useState(false)\r\n\r\n\r\n  // 获取redux数据\r\n  const {playlist, songIndex, firstLoad, playSequence, forcePlay} = useSelector(state => ({\r\n    playlist: state.getIn(['player', 'playlist']),\r\n    songIndex: state.getIn(['player', 'songIndex']),\r\n    firstLoad: state.getIn(['player', 'firstLoad']),\r\n    playSequence: state.getIn(['player', 'playSequence']),\r\n    forcePlay: state.getIn(['player', 'forcePlay']),\r\n  }), shallowEqual)\r\n  // 当前播放歌曲\r\n  const currentSong = playlist && playlist[songIndex]\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  // isPlaying 控制歌曲是否播放(true播放，false暂停)\r\n  // 将isPlaying状态分离出来监听，方便控制 切换歌曲 或 点击播放时 是否直接播放\r\n  // 因为切换歌曲不一定直接播放（如果当前播放歌曲是暂时状态的，切到上一首或下一首应该也要暂停）\r\n  // 而点击播放按钮，就直接播放（不管当前歌曲是否暂停，都直接播放点击的那首歌曲）\r\n  useEffect(() => {\r\n    isPlaying && audioRef.current.play()\r\n  }, [isPlaying])\r\n\r\n\r\n  // 当前歌曲索引改变后，重新设置音频src\r\n  useEffect(() => {\r\n    audioRef.current.src = currentSong && getAudioSrc(currentSong.id)\r\n    // 通过isPlaying状态来控制播放，如果是暂停状态，那么切换歌曲也不要播放\r\n    if(isPlaying) {\r\n      setIsPlaying(true + Math.random())\r\n    }\r\n  }, [songIndex])\r\n\r\n  // 点击播放按钮直接播放，不管当前歌曲是否暂停\r\n  useEffect(() => {\r\n    // 第一次加载时不要自动播放(点击播放按钮后更改firstLoad为false => 点击就直接播放)\r\n    if(!firstLoad) {\r\n      setIsPlaying(true + Math.random())\r\n    }\r\n  }, [forcePlay])\r\n\r\n  // 保存audio节点\r\n  const audioRef = useRef()\r\n\r\n  console.log('playlist', playlist)\r\n  console.log('songIndex', songIndex)\r\n  console.log('firstLoad: ', firstLoad);\r\n  // console.log('currentSong', currentSong)\r\n\r\n  // 利用audio中的onTimeUpdate更新歌曲的播放时间\r\n  const updatePlayTime = (e) => {\r\n    const currentTime = e.target.currentTime\r\n    if(!flag) {\r\n      setPlayTime(currentTime * 1000)\r\n      setSliderValue(((currentTime * 1000) / currentSong.dt) * 100);\r\n    }\r\n  }\r\n\r\n  // 处理歌曲播放结束，选择下一首歌曲\r\n  const handleEnding = () => {\r\n    let randomNum = Math.floor(Math.random() * playlist.length)\r\n    while(randomNum === songIndex) {\r\n      randomNum = Math.floor(Math.random() * playlist.length)\r\n    }\r\n    switch(playSequence) {\r\n      // 随机播放\r\n      case 1:\r\n        dispatch(changeCurrentSong(randomNum))\r\n        break\r\n      // 单曲循环\r\n      case 2:\r\n        audioRef.current.currentTime = 0\r\n        audioRef.current.play()\r\n        break\r\n      // 顺序播放      \r\n      default:\r\n        dispatch(changeCurrentSong((songIndex + 1) % playlist.length))\r\n    }\r\n  }\r\n\r\n  // 重新播放，传给RightControl组件\r\n  const replay = () => {\r\n    audioRef.current.currentTime = 0\r\n    audioRef.current.play()\r\n  }\r\n\r\n  return (\r\n    <PlayerbarWrapper className=\"sprite_player\">\r\n      <div className=\"w980 content\">\r\n        <LeftControl musicdom={audioRef} isPlaying={isPlaying} setIsPlaying={setIsPlaying}\r\n          playSequence={playSequence} songIndex={songIndex} playlistLength={playlist.length}>\r\n        </LeftControl>\r\n        <MidContent musicdom={audioRef} playTime={playTime} setPlayTime={setPlayTime} \r\n          sliderValue={sliderValue} setSliderValue={setSliderValue}\r\n          setFlag={setFlag}>\r\n        </MidContent>\r\n        <RightControl musicdom={audioRef} showVolume={showVolume} setShowVolume={setShowVolume}\r\n          playSequence={playSequence} playlist={playlist} replay={replay}>\r\n        </RightControl>\r\n      </div>\r\n      <audio ref={audioRef} id=\"audio\" onTimeUpdate={updatePlayTime} preload=\"auto\" onEnded={handleEnding}/>\r\n    </PlayerbarWrapper>\r\n  );\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}