{"ast":null,"code":"import { CHANGE_PLAYLIST, CHANGE_SONG_INDEX, CHANGE_FIRST_LOAD, CHANGE_PLAY_SEQUENCE, CHANGE_FORCE_PLAY, CHANGE_LYRIC_LIST, CHANGE_LYRIC_INDEX } from './constants';\nimport { sendReqToGetSongDetail, sendReqToGetLyric } from '@/service/player';\nimport { parseLyric } from '@/utils/parse-lyric'; // 获取歌曲详情用于添加到播放列表\n\nexport const addToPlaylist = data => ({\n  type: CHANGE_PLAYLIST,\n  data\n}); // 更改歌词列表\n\nexport const changeLyriclist = data => ({\n  type: CHANGE_LYRIC_LIST,\n  data\n});\nexport const addToPlaylistAsync = id => {\n  return async (dispatch, getState) => {\n    // 先判断播放列表中是否已存在该歌曲\n    const playlist = getState().getIn(['player', 'playlist']);\n    const lyriclist = getState().getIn(['player', 'lyriclist']); // 存在，直接返回\n\n    if (playlist.findIndex(obj => obj.id === id) !== -1) {\n      return;\n    } // // 不存在，请求歌曲详情\n    // sendReqToGetSongDetail(id).then(res => {\n    //   res.songs && dispatch(addToPlaylist([...playlist, res.songs[0]]))\n    // })\n    // // 请求歌词信息\n    // sendReqToGetLyric(id).then(res => {\n    //   const lyric = res.lrc && res.lrc.lyric && parseLyric(res.lrc.lyric)\n    //   lyric && dispatch(changeLyriclist([...lyriclist, lyric]))\n    // })\n\n\n    const song = await sendReqToGetSongDetail(id).then(res => {\n      return res.songs && res.songs[0];\n    });\n    const lyric = await sendReqToGetLyric(id).then(res => {\n      return res.lrc && res.lrc.lyric && parseLyric(res.lrc.lyric);\n    });\n    song && dispatch(addToPlaylist([...playlist, song]));\n    lyric && dispatch(changeLyriclist([...lyriclist, lyric]));\n  };\n}; // 播放音乐，修改当前索引值\n\nexport const changeCurrentSong = data => ({\n  type: CHANGE_SONG_INDEX,\n  data\n});\nexport const changeCurrentSongAsync = id => {\n  return (dispatch, getState) => {\n    // 先查找播放列表是否存在该歌曲\n    const playlist = getState().getIn(['player', 'playlist']);\n    const lyriclist = getState().getIn(['player', 'lyriclist']); // 若存在，则修改当前歌曲的索引为查找到的索引值\n\n    const index = playlist.findIndex(obj => obj.id === id);\n\n    if (index !== -1) {\n      dispatch(changeCurrentSong(index));\n    } else {\n      // 若不存在，则发送请求获取详情，（1）添加到播放列表，（2）修改索引值\n      sendReqToGetSongDetail(id).then(res => {\n        res.songs && dispatch(addToPlaylist([...playlist, res.songs[0]]));\n        dispatch(changeCurrentSong(playlist.length));\n      }); // 不存在，请求歌词信息\n\n      sendReqToGetLyric(id).then(res => {\n        const lyric = res.lrc && res.lrc.lyric && parseLyric(res.lrc.lyric);\n        lyric && dispatch(changeLyriclist([...lyriclist, lyric]));\n      });\n    }\n  };\n}; // 第一次加载时不要自动播放音乐（在切换歌曲的时候才自动播放）\n\nexport const changeFirstLoad = data => ({\n  type: CHANGE_FIRST_LOAD,\n  data\n}); // 更该播放顺序\n\nexport const changePlaySequence = data => ({\n  type: CHANGE_PLAY_SEQUENCE,\n  data\n}); // 更改强制播放的值，调用useEffect中的回调\n\nexport const changeForcePlay = data => ({\n  type: CHANGE_FORCE_PLAY,\n  data\n}); // 更改当前歌词\n\nexport const changeLyricIndex = data => ({\n  type: CHANGE_LYRIC_INDEX,\n  data\n});","map":{"version":3,"names":["CHANGE_PLAYLIST","CHANGE_SONG_INDEX","CHANGE_FIRST_LOAD","CHANGE_PLAY_SEQUENCE","CHANGE_FORCE_PLAY","CHANGE_LYRIC_LIST","CHANGE_LYRIC_INDEX","sendReqToGetSongDetail","sendReqToGetLyric","parseLyric","addToPlaylist","data","type","changeLyriclist","addToPlaylistAsync","id","dispatch","getState","playlist","getIn","lyriclist","findIndex","obj","song","then","res","songs","lyric","lrc","changeCurrentSong","changeCurrentSongAsync","index","length","changeFirstLoad","changePlaySequence","changeForcePlay","changeLyricIndex"],"sources":["F:/music_webapp/src/components/playbar/redux/action.js"],"sourcesContent":["import {CHANGE_PLAYLIST, CHANGE_SONG_INDEX, CHANGE_FIRST_LOAD, CHANGE_PLAY_SEQUENCE,\r\n  CHANGE_FORCE_PLAY, CHANGE_LYRIC_LIST, CHANGE_LYRIC_INDEX,\r\n} from './constants'\r\nimport {sendReqToGetSongDetail, sendReqToGetLyric} from '@/service/player'\r\nimport {parseLyric} from '@/utils/parse-lyric'\r\n\r\n// 获取歌曲详情用于添加到播放列表\r\nexport const addToPlaylist = data => ({type: CHANGE_PLAYLIST, data})\r\n// 更改歌词列表\r\nexport const changeLyriclist = data => ({type: CHANGE_LYRIC_LIST, data})\r\n\r\nexport const addToPlaylistAsync = (id) => {\r\n  return async (dispatch, getState) => {\r\n    // 先判断播放列表中是否已存在该歌曲\r\n    const playlist = getState().getIn(['player', 'playlist'])\r\n    const lyriclist = getState().getIn(['player', 'lyriclist'])\r\n    // 存在，直接返回\r\n    if(playlist.findIndex(obj => obj.id === id) !== -1){\r\n      return\r\n    }\r\n    // // 不存在，请求歌曲详情\r\n    // sendReqToGetSongDetail(id).then(res => {\r\n    //   res.songs && dispatch(addToPlaylist([...playlist, res.songs[0]]))\r\n    // })\r\n    // // 请求歌词信息\r\n    // sendReqToGetLyric(id).then(res => {\r\n    //   const lyric = res.lrc && res.lrc.lyric && parseLyric(res.lrc.lyric)\r\n    //   lyric && dispatch(changeLyriclist([...lyriclist, lyric]))\r\n    // })\r\n    const song = await sendReqToGetSongDetail(id).then(res => {return res.songs && res.songs[0]})\r\n    const lyric = await sendReqToGetLyric(id).then(res => {return res.lrc && res.lrc.lyric && parseLyric(res.lrc.lyric)})\r\n    song && dispatch(addToPlaylist([...playlist, song]))\r\n    lyric && dispatch(changeLyriclist([...lyriclist, lyric]))\r\n  }\r\n}\r\n\r\n// 播放音乐，修改当前索引值\r\nexport const changeCurrentSong = data => ({type: CHANGE_SONG_INDEX, data})\r\n\r\nexport const changeCurrentSongAsync = (id) => {\r\n  return (dispatch, getState) => {\r\n    // 先查找播放列表是否存在该歌曲\r\n    const playlist = getState().getIn(['player', 'playlist'])\r\n    const lyriclist = getState().getIn(['player', 'lyriclist'])\r\n    // 若存在，则修改当前歌曲的索引为查找到的索引值\r\n    const index = playlist.findIndex(obj => obj.id === id)\r\n    if(index !== -1){\r\n      dispatch(changeCurrentSong(index))\r\n    } else {\r\n      // 若不存在，则发送请求获取详情，（1）添加到播放列表，（2）修改索引值\r\n      sendReqToGetSongDetail(id).then(res => {\r\n        res.songs && dispatch(addToPlaylist([...playlist, res.songs[0]]))\r\n        dispatch(changeCurrentSong(playlist.length))\r\n      })\r\n      // 不存在，请求歌词信息\r\n      sendReqToGetLyric(id).then(res => {\r\n        const lyric = res.lrc && res.lrc.lyric && parseLyric(res.lrc.lyric)\r\n        lyric && dispatch(changeLyriclist([...lyriclist, lyric]))\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n// 第一次加载时不要自动播放音乐（在切换歌曲的时候才自动播放）\r\nexport const changeFirstLoad = data => ({type: CHANGE_FIRST_LOAD, data})\r\n\r\n// 更该播放顺序\r\nexport const changePlaySequence = data => ({type: CHANGE_PLAY_SEQUENCE, data})\r\n\r\n// 更改强制播放的值，调用useEffect中的回调\r\nexport const changeForcePlay = data => ({type: CHANGE_FORCE_PLAY, data})\r\n\r\n// 更改当前歌词\r\nexport const changeLyricIndex= data => ({type: CHANGE_LYRIC_INDEX, data})"],"mappings":"AAAA,SAAQA,eAAR,EAAyBC,iBAAzB,EAA4CC,iBAA5C,EAA+DC,oBAA/D,EACEC,iBADF,EACqBC,iBADrB,EACwCC,kBADxC,QAEO,aAFP;AAGA,SAAQC,sBAAR,EAAgCC,iBAAhC,QAAwD,kBAAxD;AACA,SAAQC,UAAR,QAAyB,qBAAzB,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAGC,IAAI,KAAK;EAACC,IAAI,EAAEZ,eAAP;EAAwBW;AAAxB,CAAL,CAA1B,C,CACP;;AACA,OAAO,MAAME,eAAe,GAAGF,IAAI,KAAK;EAACC,IAAI,EAAEP,iBAAP;EAA0BM;AAA1B,CAAL,CAA5B;AAEP,OAAO,MAAMG,kBAAkB,GAAIC,EAAD,IAAQ;EACxC,OAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;IACnC;IACA,MAAMC,QAAQ,GAAGD,QAAQ,GAAGE,KAAX,CAAiB,CAAC,QAAD,EAAW,UAAX,CAAjB,CAAjB;IACA,MAAMC,SAAS,GAAGH,QAAQ,GAAGE,KAAX,CAAiB,CAAC,QAAD,EAAW,WAAX,CAAjB,CAAlB,CAHmC,CAInC;;IACA,IAAGD,QAAQ,CAACG,SAAT,CAAmBC,GAAG,IAAIA,GAAG,CAACP,EAAJ,KAAWA,EAArC,MAA6C,CAAC,CAAjD,EAAmD;MACjD;IACD,CAPkC,CAQnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACA,MAAMQ,IAAI,GAAG,MAAMhB,sBAAsB,CAACQ,EAAD,CAAtB,CAA2BS,IAA3B,CAAgCC,GAAG,IAAI;MAAC,OAAOA,GAAG,CAACC,KAAJ,IAAaD,GAAG,CAACC,KAAJ,CAAU,CAAV,CAApB;IAAiC,CAAzE,CAAnB;IACA,MAAMC,KAAK,GAAG,MAAMnB,iBAAiB,CAACO,EAAD,CAAjB,CAAsBS,IAAtB,CAA2BC,GAAG,IAAI;MAAC,OAAOA,GAAG,CAACG,GAAJ,IAAWH,GAAG,CAACG,GAAJ,CAAQD,KAAnB,IAA4BlB,UAAU,CAACgB,GAAG,CAACG,GAAJ,CAAQD,KAAT,CAA7C;IAA6D,CAAhG,CAApB;IACAJ,IAAI,IAAIP,QAAQ,CAACN,aAAa,CAAC,CAAC,GAAGQ,QAAJ,EAAcK,IAAd,CAAD,CAAd,CAAhB;IACAI,KAAK,IAAIX,QAAQ,CAACH,eAAe,CAAC,CAAC,GAAGO,SAAJ,EAAeO,KAAf,CAAD,CAAhB,CAAjB;EACD,CArBD;AAsBD,CAvBM,C,CAyBP;;AACA,OAAO,MAAME,iBAAiB,GAAGlB,IAAI,KAAK;EAACC,IAAI,EAAEX,iBAAP;EAA0BU;AAA1B,CAAL,CAA9B;AAEP,OAAO,MAAMmB,sBAAsB,GAAIf,EAAD,IAAQ;EAC5C,OAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;IAC7B;IACA,MAAMC,QAAQ,GAAGD,QAAQ,GAAGE,KAAX,CAAiB,CAAC,QAAD,EAAW,UAAX,CAAjB,CAAjB;IACA,MAAMC,SAAS,GAAGH,QAAQ,GAAGE,KAAX,CAAiB,CAAC,QAAD,EAAW,WAAX,CAAjB,CAAlB,CAH6B,CAI7B;;IACA,MAAMY,KAAK,GAAGb,QAAQ,CAACG,SAAT,CAAmBC,GAAG,IAAIA,GAAG,CAACP,EAAJ,KAAWA,EAArC,CAAd;;IACA,IAAGgB,KAAK,KAAK,CAAC,CAAd,EAAgB;MACdf,QAAQ,CAACa,iBAAiB,CAACE,KAAD,CAAlB,CAAR;IACD,CAFD,MAEO;MACL;MACAxB,sBAAsB,CAACQ,EAAD,CAAtB,CAA2BS,IAA3B,CAAgCC,GAAG,IAAI;QACrCA,GAAG,CAACC,KAAJ,IAAaV,QAAQ,CAACN,aAAa,CAAC,CAAC,GAAGQ,QAAJ,EAAcO,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAd,CAAD,CAAd,CAArB;QACAV,QAAQ,CAACa,iBAAiB,CAACX,QAAQ,CAACc,MAAV,CAAlB,CAAR;MACD,CAHD,EAFK,CAML;;MACAxB,iBAAiB,CAACO,EAAD,CAAjB,CAAsBS,IAAtB,CAA2BC,GAAG,IAAI;QAChC,MAAME,KAAK,GAAGF,GAAG,CAACG,GAAJ,IAAWH,GAAG,CAACG,GAAJ,CAAQD,KAAnB,IAA4BlB,UAAU,CAACgB,GAAG,CAACG,GAAJ,CAAQD,KAAT,CAApD;QACAA,KAAK,IAAIX,QAAQ,CAACH,eAAe,CAAC,CAAC,GAAGO,SAAJ,EAAeO,KAAf,CAAD,CAAhB,CAAjB;MACD,CAHD;IAID;EACF,CApBD;AAqBD,CAtBM,C,CAwBP;;AACA,OAAO,MAAMM,eAAe,GAAGtB,IAAI,KAAK;EAACC,IAAI,EAAEV,iBAAP;EAA0BS;AAA1B,CAAL,CAA5B,C,CAEP;;AACA,OAAO,MAAMuB,kBAAkB,GAAGvB,IAAI,KAAK;EAACC,IAAI,EAAET,oBAAP;EAA6BQ;AAA7B,CAAL,CAA/B,C,CAEP;;AACA,OAAO,MAAMwB,eAAe,GAAGxB,IAAI,KAAK;EAACC,IAAI,EAAER,iBAAP;EAA0BO;AAA1B,CAAL,CAA5B,C,CAEP;;AACA,OAAO,MAAMyB,gBAAgB,GAAEzB,IAAI,KAAK;EAACC,IAAI,EAAEN,kBAAP;EAA2BK;AAA3B,CAAL,CAA5B"},"metadata":{},"sourceType":"module"}