{"ast":null,"code":"var helpers = require('../helpers');\n\nvar mark = helpers.mark;\nvar extract = helpers.extract;\nvar refer = helpers.refer;\n\nvar options = require('../constants/options');\n\nmodule.exports = function serialize(Immutable, refs, customReplacer, customReviver) {\n  function replacer(key, value) {\n    if (value instanceof Immutable.Record) return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof Immutable.Range) return extract(value, 'ImmutableRange');\n    if (value instanceof Immutable.Repeat) return extract(value, 'ImmutableRepeat');\n    if (Immutable.OrderedMap.isOrderedMap(value)) return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (Immutable.Map.isMap(value)) return mark(value, 'ImmutableMap', 'toObject');\n    if (Immutable.List.isList(value)) return mark(value, 'ImmutableList', 'toArray');\n    if (Immutable.OrderedSet.isOrderedSet(value)) return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (Immutable.Set.isSet(value)) return mark(value, 'ImmutableSet', 'toArray');\n    if (Immutable.Seq.isSeq(value)) return mark(value, 'ImmutableSeq', 'toArray');\n    if (Immutable.Stack.isStack(value)) return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n\n  function reviver(key, value) {\n    if (typeof value === 'object' && value !== null && '__serializedType__' in value) {\n      var data = value.data;\n\n      switch (value.__serializedType__) {\n        case 'ImmutableMap':\n          return Immutable.Map(data);\n\n        case 'ImmutableOrderedMap':\n          return Immutable.OrderedMap(data);\n\n        case 'ImmutableList':\n          return Immutable.List(data);\n\n        case 'ImmutableRange':\n          return Immutable.Range(data._start, data._end, data._step);\n\n        case 'ImmutableRepeat':\n          return Immutable.Repeat(data._value, data.size);\n\n        case 'ImmutableSet':\n          return Immutable.Set(data);\n\n        case 'ImmutableOrderedSet':\n          return Immutable.OrderedSet(data);\n\n        case 'ImmutableSeq':\n          return Immutable.Seq(data);\n\n        case 'ImmutableStack':\n          return Immutable.Stack(data);\n\n        case 'ImmutableRecord':\n          return refs && refs[value.__serializedRef__] ? new refs[value.__serializedRef__](data) : Immutable.Map(data);\n\n        default:\n          return data;\n      }\n    }\n\n    return value;\n  }\n\n  return {\n    replacer: customReplacer ? function (key, value) {\n      return customReplacer(key, value, replacer);\n    } : replacer,\n    reviver: customReviver ? function (key, value) {\n      return customReviver(key, value, reviver);\n    } : reviver,\n    options: options\n  };\n};","map":{"version":3,"names":["helpers","require","mark","extract","refer","options","module","exports","serialize","Immutable","refs","customReplacer","customReviver","replacer","key","value","Record","Range","Repeat","OrderedMap","isOrderedMap","Map","isMap","List","isList","OrderedSet","isOrderedSet","Set","isSet","Seq","isSeq","Stack","isStack","reviver","data","__serializedType__","_start","_end","_step","_value","size","__serializedRef__"],"sources":["F:/music_webapp/node_modules/remotedev-serialize/immutable/serialize.js"],"sourcesContent":["var helpers = require('../helpers');\nvar mark = helpers.mark;\nvar extract = helpers.extract;\nvar refer = helpers.refer;\nvar options = require('../constants/options');\n\nmodule.exports = function serialize(\n  Immutable,\n  refs,\n  customReplacer,\n  customReviver\n) {\n  function replacer(key, value) {\n    if (value instanceof Immutable.Record)\n      return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof Immutable.Range)\n      return extract(value, 'ImmutableRange');\n    if (value instanceof Immutable.Repeat)\n      return extract(value, 'ImmutableRepeat');\n    if (Immutable.OrderedMap.isOrderedMap(value))\n      return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (Immutable.Map.isMap(value))\n      return mark(value, 'ImmutableMap', 'toObject');\n    if (Immutable.List.isList(value))\n      return mark(value, 'ImmutableList', 'toArray');\n    if (Immutable.OrderedSet.isOrderedSet(value))\n      return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (Immutable.Set.isSet(value))\n      return mark(value, 'ImmutableSet', 'toArray');\n    if (Immutable.Seq.isSeq(value))\n      return mark(value, 'ImmutableSeq', 'toArray');\n    if (Immutable.Stack.isStack(value))\n      return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n\n  function reviver(key, value) {\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      '__serializedType__' in value\n    ) {\n      var data = value.data;\n      switch (value.__serializedType__) {\n        case 'ImmutableMap':\n          return Immutable.Map(data);\n        case 'ImmutableOrderedMap':\n          return Immutable.OrderedMap(data);\n        case 'ImmutableList':\n          return Immutable.List(data);\n        case 'ImmutableRange':\n          return Immutable.Range(data._start, data._end, data._step);\n        case 'ImmutableRepeat':\n          return Immutable.Repeat(data._value, data.size);\n        case 'ImmutableSet':\n          return Immutable.Set(data);\n        case 'ImmutableOrderedSet':\n          return Immutable.OrderedSet(data);\n        case 'ImmutableSeq':\n          return Immutable.Seq(data);\n        case 'ImmutableStack':\n          return Immutable.Stack(data);\n        case 'ImmutableRecord':\n          return refs && refs[value.__serializedRef__]\n            ? new refs[value.__serializedRef__](data)\n            : Immutable.Map(data);\n        default:\n          return data;\n      }\n    }\n    return value;\n  }\n\n  return {\n    replacer: customReplacer\n      ? function (key, value) {\n          return customReplacer(key, value, replacer);\n        }\n      : replacer,\n    reviver: customReviver\n      ? function (key, value) {\n          return customReviver(key, value, reviver);\n        }\n      : reviver,\n    options: options,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}