{"ast":null,"code":"var _jsxFileName = \"F:\\\\music_webapp\\\\src\\\\components\\\\playbar\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState, useRef, useCallback } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { addToPlaylistAsync } from './redux/action';\nimport { NavLink } from 'react-router-dom';\nimport { getAudioSrc } from '@/utils/format-data';\nimport { PlayerbarWrapper } from './style';\nimport LeftControl from './child-components/leftControl';\nimport MidContent from './child-components/middleContent';\nimport RightControl from './child-components/rightControl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(function PlayerBar() {\n  _s();\n\n  // 组件自身state\n  // 是否正在播放\n  const [isPlaying, setIsPlaying] = useState(false); // 歌曲播放时间\n\n  const [playTime, setPlayTime] = useState(0); // Slider进度条的值\n\n  const [sliderValue, setSliderValue] = useState(0); // 拖动进度条时，若audio中的onTimeUpdate事件也在更改进度会有bug，应该让拖动进度条的优先级更高\n  // flag为true表示正在拖动滑块改变进度，此时audio中的onTimeUpdate事件不应该再更改进度条(播放时间与进度值)\n\n  const [flag, setFlag] = useState(false); // 是否展示音量条\n\n  const [showVolume, setShowVolume] = useState(false); // 获取redux数据\n\n  const {\n    playlist,\n    songIndex,\n    firstLoad\n  } = useSelector(state => ({\n    playlist: state.getIn(['player', 'playlist']),\n    songIndex: state.getIn(['player', 'songIndex']),\n    firstLoad: state.getIn(['player', 'firstLoad'])\n  }), shallowEqual); // 当前播放歌曲\n\n  const currentSong = playlist && playlist[songIndex];\n  const dispatch = useDispatch(); // 当前歌曲索引改变后，重新设置音频src\n\n  useEffect(() => {\n    audioRef.current.src = currentSong && getAudioSrc(currentSong.id); // 第一次加载时不要自动播放(点击播放按钮后更改firstLoad为false => 点击就直接播放)\n\n    if (!firstLoad) {\n      setIsPlaying(true);\n      audioRef.current.play();\n    }\n  }, [songIndex]); // 保存audio节点\n\n  const audioRef = useRef(); // console.log('playlist', playlist)\n  // console.log('songIndex', songIndex)\n  // console.log('currentSong', currentSong)\n  // 利用audio中的onTimeUpdate更新歌曲的播放时间\n\n  const updatePlayTime = e => {\n    const currentTime = e.target.currentTime;\n\n    if (!flag) {\n      setPlayTime(currentTime * 1000);\n      setSliderValue(currentTime * 1000 / currentSong.dt * 100);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PlayerbarWrapper, {\n    className: \"sprite_player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w980 content\",\n      children: [/*#__PURE__*/_jsxDEV(LeftControl, {\n        musicdom: audioRef,\n        isPlaying: isPlaying,\n        setIsPlaying: setIsPlaying\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MidContent, {\n        musicdom: audioRef,\n        playTime: playTime,\n        setPlayTime: setPlayTime,\n        sliderValue: sliderValue,\n        setSliderValue: setSliderValue,\n        setFlag: setFlag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RightControl, {\n        musicdom: audioRef,\n        showVolume: showVolume,\n        setShowVolume: setShowVolume\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      id: \"audio\",\n      onTimeUpdate: updatePlayTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}, \"d0rJPvz5jOmIB9NyoTxefW5kfqE=\", false, function () {\n  return [useSelector, useDispatch];\n})), \"d0rJPvz5jOmIB9NyoTxefW5kfqE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","memo","useEffect","useState","useRef","useCallback","shallowEqual","useDispatch","useSelector","addToPlaylistAsync","NavLink","getAudioSrc","PlayerbarWrapper","LeftControl","MidContent","RightControl","PlayerBar","isPlaying","setIsPlaying","playTime","setPlayTime","sliderValue","setSliderValue","flag","setFlag","showVolume","setShowVolume","playlist","songIndex","firstLoad","state","getIn","currentSong","dispatch","audioRef","current","src","id","play","updatePlayTime","e","currentTime","target","dt"],"sources":["F:/music_webapp/src/components/playbar/index.js"],"sourcesContent":["import React, { memo, useEffect, useState, useRef, useCallback } from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport {addToPlaylistAsync} from './redux/action'\r\n\r\nimport { NavLink } from 'react-router-dom';\r\nimport {getAudioSrc} from '@/utils/format-data'\r\n\r\nimport {PlayerbarWrapper} from './style'\r\nimport LeftControl from './child-components/leftControl';\r\nimport MidContent from './child-components/middleContent';\r\nimport RightControl from './child-components/rightControl';\r\n\r\n\r\nexport default memo(function PlayerBar() {\r\n\r\n  // 组件自身state\r\n\r\n  // 是否正在播放\r\n  const [isPlaying, setIsPlaying] = useState(false)\r\n  // 歌曲播放时间\r\n  const [playTime, setPlayTime] = useState(0)\r\n  // Slider进度条的值\r\n  const [sliderValue, setSliderValue] = useState(0)\r\n  // 拖动进度条时，若audio中的onTimeUpdate事件也在更改进度会有bug，应该让拖动进度条的优先级更高\r\n  // flag为true表示正在拖动滑块改变进度，此时audio中的onTimeUpdate事件不应该再更改进度条(播放时间与进度值)\r\n  const [flag, setFlag] = useState(false)\r\n  // 是否展示音量条\r\n  const [showVolume, setShowVolume] = useState(false)\r\n\r\n\r\n  // 获取redux数据\r\n  const {playlist, songIndex, firstLoad} = useSelector(state => ({\r\n    playlist: state.getIn(['player', 'playlist']),\r\n    songIndex: state.getIn(['player', 'songIndex']),\r\n    firstLoad: state.getIn(['player', 'firstLoad']),\r\n  }), shallowEqual)\r\n  // 当前播放歌曲\r\n  const currentSong = playlist && playlist[songIndex]\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  // 当前歌曲索引改变后，重新设置音频src\r\n  useEffect(() => {\r\n    audioRef.current.src = currentSong && getAudioSrc(currentSong.id)\r\n    // 第一次加载时不要自动播放(点击播放按钮后更改firstLoad为false => 点击就直接播放)\r\n    if(!firstLoad){\r\n      setIsPlaying(true)\r\n      audioRef.current.play()\r\n    }\r\n  }, [songIndex])\r\n\r\n  // 保存audio节点\r\n  const audioRef = useRef()\r\n\r\n  // console.log('playlist', playlist)\r\n  // console.log('songIndex', songIndex)\r\n  // console.log('currentSong', currentSong)\r\n\r\n  // 利用audio中的onTimeUpdate更新歌曲的播放时间\r\n  const updatePlayTime = (e) => {\r\n    const currentTime = e.target.currentTime\r\n    if(!flag) {\r\n      setPlayTime(currentTime * 1000)\r\n      setSliderValue(((currentTime * 1000) / currentSong.dt) * 100);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PlayerbarWrapper className=\"sprite_player\">\r\n      <div className=\"w980 content\">\r\n        <LeftControl musicdom={audioRef} isPlaying={isPlaying} setIsPlaying={setIsPlaying}></LeftControl>\r\n        <MidContent musicdom={audioRef} playTime={playTime} setPlayTime={setPlayTime} \r\n          sliderValue={sliderValue} setSliderValue={setSliderValue}\r\n          setFlag={setFlag}>\r\n        </MidContent>\r\n        <RightControl musicdom={audioRef} showVolume={showVolume} setShowVolume={setShowVolume}></RightControl>\r\n      </div>\r\n      <audio ref={audioRef} id=\"audio\" onTimeUpdate={updatePlayTime} />\r\n    </PlayerbarWrapper>\r\n  );\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}