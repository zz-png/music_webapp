{"ast":null,"code":"var _jsxFileName = \"F:\\\\music_webapp\\\\src\\\\components\\\\playbar\\\\child-components\\\\leftControl\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeCurrentSong } from '../../redux/action';\nimport { getAudioSrc } from '@/utils/format-data';\nimport { LeftWrapper } from './style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(function LeftControl(props) {\n  _s();\n\n  const {\n    musicdom,\n    isPlaying,\n    setIsPlaying,\n    playSequence,\n    songIndex\n  } = props; // 处理播放按钮\n\n  const playMusic = useCallback(() => {\n    // console.log('before: ', isPlaying);\n    setIsPlaying(!isPlaying); // console.log('after: ', isPlaying);\n    // 上面两行输出的内容相同，说明还没有重新渲染组件 => 并不是执行完setIsPlaying它就立刻改变了\n\n    if (isPlaying) {\n      musicdom.current.pause();\n    } else {\n      musicdom.current.play();\n    }\n  }, [isPlaying]); // 切换歌曲\n\n  const dispatch = useDispatch();\n\n  const switchSong = tag => {\n    console.log('click', tag);\n  };\n\n  return /*#__PURE__*/_jsxDEV(LeftWrapper, {\n    isPlaying: isPlaying,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sprite_player pre\",\n      onClick: switchSong(1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sprite_player play\",\n      onClick: playMusic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sprite_player next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}, \"j/v6xeLgz4k9AKjqVABDXd83mv0=\", false, function () {\n  return [useDispatch];\n})), \"j/v6xeLgz4k9AKjqVABDXd83mv0=\", false, function () {\n  return [useDispatch];\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","memo","useCallback","useDispatch","changeCurrentSong","getAudioSrc","LeftWrapper","LeftControl","props","musicdom","isPlaying","setIsPlaying","playSequence","songIndex","playMusic","current","pause","play","dispatch","switchSong","tag","console","log"],"sources":["F:/music_webapp/src/components/playbar/child-components/leftControl/index.js"],"sourcesContent":["import React, {memo, useCallback} from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport {changeCurrentSong} from '../../redux/action'\r\nimport {getAudioSrc} from '@/utils/format-data'\r\nimport {LeftWrapper} from './style'\r\n\r\nexport default memo(function LeftControl(props) {\r\n\r\n  const {musicdom, isPlaying, setIsPlaying, playSequence, songIndex} = props\r\n\r\n  // 处理播放按钮\r\n  const playMusic = useCallback(() => {\r\n    // console.log('before: ', isPlaying);\r\n    setIsPlaying(!isPlaying)\r\n    // console.log('after: ', isPlaying);\r\n    // 上面两行输出的内容相同，说明还没有重新渲染组件 => 并不是执行完setIsPlaying它就立刻改变了\r\n    if(isPlaying) {\r\n      musicdom.current.pause()\r\n    } else {\r\n      musicdom.current.play()\r\n    }\r\n  }, [isPlaying])\r\n\r\n  // 切换歌曲\r\n  const dispatch = useDispatch()\r\n\r\n  const switchSong = (tag) => {\r\n    console.log('click', tag);\r\n  }\r\n\r\n  return (\r\n    <LeftWrapper isPlaying={isPlaying}>\r\n      <button className=\"sprite_player pre\" onClick={switchSong(1)}></button>\r\n      <button className=\"sprite_player play\" onClick={playMusic}></button>\r\n      <button className=\"sprite_player next\"></button>\r\n    </LeftWrapper>\r\n  )\r\n})\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,IAAf,EAAqBC,WAArB,QAAuC,OAAvC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,iBAAR,QAAgC,oBAAhC;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,SAAQC,WAAR,QAA0B,SAA1B;;AAEA,mDAAeL,IAAI,SAAC,SAASM,WAAT,CAAqBC,KAArB,EAA4B;EAAA;;EAE9C,MAAM;IAACC,QAAD;IAAWC,SAAX;IAAsBC,YAAtB;IAAoCC,YAApC;IAAkDC;EAAlD,IAA+DL,KAArE,CAF8C,CAI9C;;EACA,MAAMM,SAAS,GAAGZ,WAAW,CAAC,MAAM;IAClC;IACAS,YAAY,CAAC,CAACD,SAAF,CAAZ,CAFkC,CAGlC;IACA;;IACA,IAAGA,SAAH,EAAc;MACZD,QAAQ,CAACM,OAAT,CAAiBC,KAAjB;IACD,CAFD,MAEO;MACLP,QAAQ,CAACM,OAAT,CAAiBE,IAAjB;IACD;EACF,CAV4B,EAU1B,CAACP,SAAD,CAV0B,CAA7B,CAL8C,CAiB9C;;EACA,MAAMQ,QAAQ,GAAGf,WAAW,EAA5B;;EAEA,MAAMgB,UAAU,GAAIC,GAAD,IAAS;IAC1BC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;EACD,CAFD;;EAIA,oBACE,QAAC,WAAD;IAAa,SAAS,EAAEV,SAAxB;IAAA,wBACE;MAAQ,SAAS,EAAC,mBAAlB;MAAsC,OAAO,EAAES,UAAU,CAAC,CAAD;IAAzD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,SAAS,EAAC,oBAAlB;MAAuC,OAAO,EAAEL;IAAhD;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAQ,SAAS,EAAC;IAAlB;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CA/BkB;EAAA,QAkBAX,WAlBA;AAAA,GAAnB;EAAA,QAkBmBA,WAlBnB;AAAA"},"metadata":{},"sourceType":"module"}